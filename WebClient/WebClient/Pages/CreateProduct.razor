@page "/create-product"
@using WebClient.Models
@inject Services.ICatalogServiceClient CatalogServiceClient

<h3>Create New Product</h3>

<EditForm Model="productRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Name:</label>
        <InputText @bind-Value="productRequest.Name" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description:</label>
        <InputTextArea @bind-Value="productRequest.Description" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Price:</label>
        <InputNumber @bind-Value="productRequest.Price" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Stock:</label>
        <InputNumber @bind-Value="productRequest.Stock" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Category Id:</label>
        <InputNumber @bind-Value="productRequest.CategoryId" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Create Product</button>
</EditForm>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <div class="alert alert-info mt-3">@resultMessage</div>
}

@code {
    private CreateProductRequest productRequest = new CreateProductRequest();
    private string? resultMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await CatalogServiceClient.CreateProductAsync(productRequest);
            resultMessage = response.Success
                ? $"Product created successfully:"
                : $"Failed to create product: {response.Message}";
        }
        catch (Exception ex)
        {
            resultMessage = $"Error: {ex.Message}";
        }
    }
}