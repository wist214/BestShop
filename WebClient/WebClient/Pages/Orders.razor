@page "/orders"
@using OrderService.GrpcContracts
@inject Services.IOrderServiceClient OrderServiceClient

<h3>Orders</h3>

@if (orders == null)
{
    <p><em>Loading orders...</em></p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Order ID</th>
            <th>User ID</th>
            <th>Status</th>
            <th>Created At</th>
            <th>Items Count</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.UserId</td>
                <td>@order.Status</td>
                <td>@order.CreatedAt.ToDateTime().ToString("g")</td>
                <td>@order.Items.Count</td>
                <td>
                        <button class="btn btn-success btn-sm" @onclick="() => ConfirmOrder(order)" disabled="@(order.Status != OrderStatus.Created)">Confirm</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    // List to hold orders retrieved from the gRPC OrderService
    private List<global::OrderService.GrpcContracts.Order> orders = new();

    protected override async Task OnInitializedAsync()
    {
        // Assuming you have implemented GetAllOrdersAsync in your IOrderServiceClient.
        // This method should retrieve all orders from OrderService.
        orders = await OrderServiceClient.GetOrdersAsync(1);
    }

    private async Task ConfirmOrder(global::OrderService.GrpcContracts.Order order)
    {
        order.Status = OrderStatus.Paid;
        var result = await OrderServiceClient.UpdateOrderAsync(order);

        if (result.Success)
        {
            orders = await OrderServiceClient.GetOrdersAsync(1);
        }
    }
}